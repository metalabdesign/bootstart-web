// flow-typed signature: 8de43da7f58ac3e01ff1913d3d8a7539
// flow-typed version: <<STUB>>/midori_v1.0.0/flow_v0.64.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'midori'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'midori' {

  import type {Server} from 'http';

  declare type ServeOptions = {
    final?: boolean,
    onDirectory?: (directory: string) => App,
    acceptRanges?: boolean,
    cacheControl?: boolean,
    dotfiles?: ('allow' | 'deny' | 'ignore'),
    end?: number,
    etag?: boolean,
    extensions?: Array<string>,
    immutable?: boolean,
    index?: boolean,
    lastModified?: boolean,
    maxAge?: (number | string),
    root: string,
    start?: number,
  };

  declare export class App {}
  declare export function graceful(): App;
  declare export function timing(): App;
  declare export function logging(): App;
  declare export function secure(): App;
  declare export function id(): App;
  declare export function serve(ServeOptions): App;
  declare export function compression(): App;
  declare export function assign(req: *, res?: *): App;
  declare export function compose(...rest: Array<App>): App;
  declare export function use(string, ...rest: Array<App>): App;
  declare export function get(string, ...rest: Array<App>): App;
  declare export function request(
    fn: (req: *, res: *) => App | Promise<App>
  ): App;
  declare export function error(
    fn: (err: Error, req: *, res: *) => App | Promise<App>
  ): App;
  declare export function send(string | Buffer): App;
  declare export function status(number): App;
  declare export function header(string, string): App;
  declare export var next: App;
  declare export function listen(App, ...rest: Array<*>): Server;
}

declare module 'midori/test' {
  import type {App} from 'midori';
  declare export function fetch(App, string, opts?: {
    method: string,
  }): Promise<*>;
}
